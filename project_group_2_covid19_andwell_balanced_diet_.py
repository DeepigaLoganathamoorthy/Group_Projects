# -*- coding: utf-8 -*-
"""Project Group 2 Covid19 andwell-balanced diet .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zKFiLI9FaGmYx2351-9pvtotDZV0jJza

##**The impacts of a well-balanced diet on immunity in combating the COVID-19 virus in various countries**

#**Questions:**
1. How many countries adhere to the health authorities' recommendations to consume at least 40% vegetables for a balanced diet?
2. How is the current death and total cases in countries that consume recommended amount of vegetables for their daily intakes as compare to those that doesn't follow the recommendation?
3. Compare different machine learning models to identify the predictive COVID-19 trends in countries where sufficient vegetables is consumed or vice versa?

#**Overview & Motivation:**

The COVID-19 pandemic has resulted in significant fatalities around the globe, and it poses an enormous threat to public health, food systems, and the industry. To combat the virus, it is vital to achieve and maintain a healthy nutritional state. Individuals' nutritional status has been utilised as a destabilisation buffer during the COVID-19 pandemic. Since optimal nutrition and dietary nutrient intake have an impact on the immune system, boosting immunity is now the only method to survive in the present circumstance. Apart from Vitamin C, which is among the best ways to strengthen the immune system, there is no clear information that supplements can recover immunity. **This project represents the statistical data of various countries that adhere to a balanced diet as suggested by health officials to consume 40% vegetables, along with their COVID-19 cases and dietary reference consumption trends. Furthermore, it also forecasts COVID-19 patterns in countries where adequate dietary advice is consumed.**

#**Literature:**
1.Worldwide more than 100 countries have developed or are currently developing food-based dietary guidelines, with many revised at least once regional guidelines also exist,for example, the guide promoting a healthy diet for the WHC Eastern Mediterranean region.(Cuiyan Wang et al., 2021) Most countries in Asia and the Pacific, Europe North America. Latin America and the Caribbean have national dietary guidelines. Food-based dietary guidelines have also been developed in a few countries in Africa and the Near East. The country materials on this site were produced by national expert committees and have been republished with permission of the owner. FAO has not modified them and does not necessarily endorse the views expressed in the documents permission for further use of materials should be obtained from the copyright holder(Rice University. 2020).

2.During lockdown people tended to reduce their intake of fresh food during lockdown, particularly fruits, vegetables and meat. People across the three countries(Denmark, Germany and Slovenia) shopped less frequently during lockdown and there was an overall reduction in the consumption of fresh foods, but an increase in the consumption of food with a longer shelf life in Denmark and Germany.

3.While no foods or dietary supplements can prevent or cure COVID-19 infection, healthy diets are important for supporting immune systems. Smoking habits have been reduced during the lockdown.(Thomas K. F. Chiu et al., 2021)

#**Dataset**

#1. Food intake Data Set
"""

from google.colab import files
uploaded = files.upload()

"""**Explore Data set :**
We will be using Pandas library from python to exploere, cleaning and processing the data set
"""

import pandas as pd
foodIntakeData = pd.read_csv('Food_Supply_Quantity_kg_Data.csv')
foodIntakeData.head(5)

# Getting the shape of data set to know the size and columns of the data set
print('The shape of our dataset is:', foodIntakeData.shape)
# From the results, there are 170 rows and total 32 columns in the data set

# Get a summary of the dataset to know the anomalies in our dataset so we can clean it before sending it to our models
foodIntakeData.describe()

# Another way to check for NaN or null is using isnull() method
foodIntakeData.isnull()

# we can again see that undernourished have some NaN or Null values that we need to addressed before proceeding with next steps

"""To pre process and remove extra columns from the data set that are not required, we first have to undersatnd the dataset. We will grab all the details about the each column and after getting the details about each column we will remove unnecessary details from our dataset."""

import pandas as pd
foodIntakeDataDesc = pd.read_csv('Supply_Food_Data_Descriptions.csv')
foodIntakeDataDesc

"""From the list above we will be interested in following items:


*   Proteins (Meat, Fish Seafood, Eggs)
*   Vegetables (Vegetables)
*   Fruits (Fruits)
*   Grains (Cereals - Excluding Beer) 








"""

foodIntakeNewDf = foodIntakeData[['Country', 'Meat','Fish, Seafood','Eggs','Vegetables', 'Fruits - Excluding Wine','Cereals - Excluding Beer', 'Obesity', 'Population', 'Confirmed', 'Deaths', 'Recovered']].copy()
foodIntakeNewDf.head(5)

foodIntakeNewDf['Proteins'] = foodIntakeNewDf.iloc[:,-11:-8].sum(axis=1)
foodIntakeNewDf.drop(['Meat', 'Fish, Seafood','Eggs'], axis = 1, inplace=True)
foodIntakeNewDf.rename(columns={'Fruits - Excluding Wine': 'Fruits', 'Cereals - Excluding Beer': 'Grains'}, inplace=True)
cols = list(foodIntakeNewDf)
cols.insert(1, cols.pop(cols.index('Proteins')))
foodIntakeNewDf = foodIntakeNewDf.loc[:, cols]
foodIntakeNewDf['Others'] = 100.0000 - foodIntakeNewDf.iloc[:,-9:-5].sum(axis=1)
cols = list(foodIntakeNewDf)
cols.insert(5, cols.pop(cols.index('Others')))
foodIntakeNewDf = foodIntakeNewDf.loc[:, cols]
foodIntakeNewDf.drop(['Proteins', 'Fruits', 'Grains', 'Others', 'Population','Confirmed','Deaths', 'Recovered'], axis = 1, inplace=True)
foodIntakeNewDf.head(5)

# Check the null values
foodIntakeNewDf.isnull().sum()

# Replace all NaN values to its mean
foodIntakeNewDf.fillna(foodIntakeNewDf.mean(), inplace=True)
foodIntakeNewDf.isnull().sum()

"""Above is the pre processed dataset that we will be using to eveluate which countries have more vegetables intake and how it reflects with Covid-19 cases or deaths

#2. Scraping Latest Worldometer Covid data

As we couldn't find any realiable latest covid data, 
so we are scraping from  https://www.worldometers.info/coronavirus/
"""

from bs4 import BeautifulSoup
import requests as req    
import pandas as pd
import os
from datetime import date

# getting worldometer data
contents = req.get("https://www.worldometers.info/coronavirus/")
res=[]
soup = BeautifulSoup(contents.text, 'lxml')
table = soup.find_all('table')[1]
table_rows = table.find_all('tr')
data_row=pd.DataFrame()
for tr in table_rows:
    td = tr.find_all('td')
    row = [i.text for i in td]
    if(len(row)>0):
        res.append(row) 

# Formatting Data

column_dict = {1:'Country',2:'Total cases',3:'New Cases',4:'Total Deaths',5:'New Deaths',6:'Total Recovered',\
               7:'New Recovered',8:'Active cases',9:'Serious,Critical',10:'Tot cases 1M pop',11:'Death 1M pop',\
               12:'Total Tests',13:'Tests 1M pop',14:'Population'}

# pd.set_option("display.max_rows", None, "display.max_columns", None)
tmp_df = pd.DataFrame(res)
tmp_df = tmp_df[tmp_df[0] != ''].reset_index()
tmp_df.drop(['index', 0,15,16,17,18,19,20,21], axis = 1, inplace=True)
tmp_df.rename(columns=column_dict, inplace=True)
tmp_df.to_csv('covid_19_country_data.csv',index=False)

import pandas as pd
# foodIntakeData = pd.read_csv('Food_Supply_Quantity_kg_Data.csv')
covidCountryDataSet = pd.read_csv('/content/covid_19_country_data.csv')
covidCountryDataSet.head(5)

# Getting the shape of data set to know the size and columns of the data set
print('The shape of our dataset is:', covidCountryDataSet.shape)
# From the results, there are 224 rows and total 14 columns in the data set

# Get a summary of the dataset to know the anomalies in our dataset so we can clean it before sending it to our models
covidCountryDataSet.describe()

# We will verify if there is any rows having non number type of data which is not expected in our case using isreal method
 
import numpy as np
covidCountryDataSet.applymap(np.isreal)

# Undernourished column does have some values that are non numeric which is NaN or null

#Counting Null values in every column 
covidCountryDataSet.isnull().sum(axis = 0)

# Another way to check for NaN or null is using isnull() method
covidCountryDataSet.isnull()

# we can again see that undernourished have some NaN or Null values that we need to addressed before proceeding with next steps

## Cleanig the covid dataset
#Droping the unnecessary Column
covidCountryDataSet.drop(['New Cases', 'New Deaths', 'New Recovered','Serious,Critical','Tot cases 1M pop', 'Death 1M pop','Tests 1M pop','Total Tests'], axis = 1, inplace=True)
#Renaming to understand easily
covidCountryDataSet.rename(columns={'Total cases':'total_covid_cases','Total Deaths':'total_covid_deaths','Total Recovered':'total_covid_recovered',\
                                    'Active cases':'active_covid_cases',}, inplace=True)
covidCountryDataSet = covidCountryDataSet.sort_values('Country',ascending=1)
covidCountryDataSet.head()

#Again Counting Null values in every column 
covidCountryDataSet.isnull().sum(axis = 0)

#as there are very few null values, thats why droping them
covidCountryDataSet.dropna(inplace=True)
covidCountryDataSet.head()

#final shape of covid dataset
covidCountryDataSet.shape

## merging covid datset and food intake data set with focusing on country name
merged_df = pd.merge(covidCountryDataSet,foodIntakeNewDf,how='inner',on='Country')

#Droping the raw which have null values
merged_df.dropna(inplace=True)

merged_df.head()

# Getting the shape of data set to know the size and columns of the data set
print('The shape of our Marged dataset is:', merged_df.shape)

#Checking if there any null value in this final merged dataset
merged_df.isnull().sum(axis = 0)

"""Converting few columns to Float  type for plotting

"""

merged_df["active_covid_cases"] = merged_df["active_covid_cases"].str.replace(',', '').astype(float)
merged_df["total_covid_cases"] = merged_df["total_covid_cases"].str.replace(',', '').astype(float)
merged_df["total_covid_recovered"] = merged_df["total_covid_recovered"].str.replace(',', '').astype(float)

merged_df['total_covid_deaths'].replace(['', ' '], '0', inplace=True)
merged_df['total_covid_deaths'] = merged_df['total_covid_deaths'].str.replace(',', '').astype(float)

dataTypeSeries = merged_df.dtypes
print('Data type of each column of Dataframe :')
print(dataTypeSeries)

"""Here we have the final cleaned data set without any null values, which we can use to run models.

# **Exploratory Data Analysis**

Loading several helpful packages for visualization
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
pd.plotting.register_matplotlib_converters()
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

import plotly.express as px

import os
print("Setup Complete")

"""Installing pycountry"""

pip install pycountry

import pycountry

exceptions = []

def get_alpha_3_code(cou):
    try:
        return pycountry.countries.search_fuzzy(cou)[0].alpha_3
    except:
        exceptions.append(cou)


merged_df['iso_alpha'] = merged_df['Country'].apply(lambda x : get_alpha_3_code(x))

# removeing exceptions
for exc in exceptions:
    merged_df = merged_df[worldometer['Country']!=exc]
    
    
fig = px.scatter_geo(merged_df, locations="iso_alpha",
                     color="Country", # which column to use to set the color of markers
                     hover_name="Country", # column added to hover information
                     size="total_covid_cases", # size of markers
                     projection="orthographic")
fig

"""Here, we are showing the active covid cases of each country. Size of markers is related to the number of total covid cases.

**List of top 10 countries who consume highest percentage of vegetables**
"""

fig, ax = plt.subplots(figsize=(10, 5))

merged_df.sort_values(by='Vegetables', ascending=False, inplace=True)
sns.barplot( x="Vegetables", y="Country", data=merged_df[:10]);

"""
It can be seen in the bar chart that none of the countries consume 40% of vegetables which is recommended for a balanced diet. Tajikistan's people consume almost 20% of vegetables which is the highest. 
"""

fig, ax = plt.subplots(figsize=(20, 5))

merged_df.sort_values(by='Vegetables', ascending=False, inplace=True)
sns.barplot(x="total_covid_cases", y="Country", data=merged_df[:10]);

""" 
Here we are showing the total number of covid cases of those top 10 vegetable consumed countries. We can notice that Turkey is the country with the highest number of covid cases and other country's confirmed covid cases are under 10 million.


"""

fig, ax = plt.subplots(figsize=(20, 5))

merged_df.sort_values(by='Vegetables', ascending=False, inplace=True)
sns.barplot(x="total_covid_recovered", y="Country", data=merged_df[:10]);

"""**List of 10 countries who consume lowest percentage of vegetables**"""

fig, ax = plt.subplots(figsize=(10, 5))

merged_df.sort_values(by='Vegetables', ascending=True, inplace=True)
sns.barplot( x="Vegetables", y="Country", data=merged_df[:10]);

"""This bar chart illustrates the ten countries who consume the least amount of vegetables. It can be seen that a country called Sao Tome and Principe's people consume the least, which is less than 1% of vegetables."""

fig, ax = plt.subplots(figsize=(10, 5))

merged_df.sort_values(by='Vegetables', ascending=True, inplace=True)
sns.barplot(x="total_covid_recovered", y="Country", data=merged_df[:10]);

fig, ax = plt.subplots(figsize=(10, 5))

merged_df.sort_values(by='Vegetables', ascending=True, inplace=True)
sns.barplot(x="total_covid_deaths", y="Country", data=merged_df[:10]);

"""This bar graph shows the covid deaths of those countries and we can notice that the number of covid deaths is under ten thousands. Also countries called samoa and solomon islands have no deaths due to Covid.

**List of The Countries With the Highest COVID-19 Death and percentage of consumed vegetables**
"""

fig, ax = plt.subplots(figsize=(10, 5))

merged_df.sort_values(by='total_covid_deaths', ascending=False, inplace=True)
sns.barplot(x="Vegetables", y="Country", data=merged_df[:10]);

"""It can be seen that the Countries With the Highest COVID-19 Death toll consumed a very little amount of vegetables in their daily diet which was only under almost 8%.

**Top ten countries by total recovered from covid-19 and  Veggies consumption %**
"""

fig, ax = plt.subplots(figsize=(10, 5))

merged_df.sort_values(by='total_covid_recovered', ascending=False, inplace=True)
sns.barplot(x="Vegetables", y="Country", data=merged_df[:10]);

"""Here we are showing the top ten countries by total recovered from covid-19 and the percentage of vegetable consumption . An interesting fact can be noticed that Turkey was one the highest vegetable consuming countries which is up to almost 14%. So we can say that, daily a good amount of vegetable consumption plays a great role in recovery.     


"""

sns.relplot(x="Vegetables", y="total_covid_deaths", data=merged_df);

"""This scatterplot shows the correlation between  total covid death and the percentage of consumed vegetables. We can see that if vegetables intake increases  then the number of total covid cases will decrease. 

"""

sns.relplot(x="Vegetables", y="total_covid_recovered", data=merged_df);

"""This scatterplot shows the correlation between total covid recovered and the percentage of consumed vegetables. We can see that if vegetables intake increases  then the number of total covid recovery will increase.  """

##With Regression Line

plt.figure(figsize=(10,6))

sns.regplot(x=merged_df['Obesity'], y=merged_df['Vegetables'])

plt.ylabel("Obesity % each country")

plt.xlabel(" Vegetables consuption in kg")
plt.title("Veggies consumption and Obesity %")
plt.savefig('output.png', dpi=300)

"""Here it can be  seen that if vegetables consumption increases, Obesity will decrease. The countries with the most obesity rate seem to consume less vegetables than people on average."""

sns.relplot(x="Obesity", y="total_covid_deaths", data=merged_df);

"""Deaths patients have a stronger correlation with Obesity

"""

sns.relplot(x="Obesity", y="total_covid_recovered", data=merged_df);

"""Here we can notice that if Obesity increases , the chance of recovery from covid will decrease.

**Healthy Diet vs Covid**
"""

import plotly.figure_factory as ff
corr_heatmap=merged_df[['total_covid_cases','Obesity','total_covid_recovered','Vegetables','total_covid_deaths']]
x=corr_heatmap.corr(method='pearson').round(3)
ff.create_annotated_heatmap(z=x.values, x=x.columns.to_list(), y=x.columns.to_list(), colorscale="BuPu", showscale=True)

"""Indeed, we can now see that Recovery has a stronger correlation with Vegetables consumption than Obesity. On the other hand Deaths patients have a stronger correlation with Obesity than Vegetables consumption.

**This could mean that in average, patients who take good amount of vegetables in their diet is are most likely to recover from covid while obese patients are most likely to die.**
"""

#Dataset, Covid daily cases RAW data from 31/12/2019 till 14/12/2020

!pip install pycountry
import pycountry
import plotly.express as px
import pandas as pd

URL_DATASET = r'https://raw.githubusercontent.com/muhammad-umair-malik-git/covid-data/main/COVID-19-geographic-disbtribution-worldwide-2020-12-14.csv'

covid_daily_cases = pd.read_csv(URL_DATASET)
covid_daily_cases.head()

"""Install packages"""

pip install -U scikit-learn

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.tree import plot_tree
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score
from sklearn import metrics

"""#**Machine Learning**

Randomforest machine leanring model
"""

def splitdataset(country) :
  plt.rcParams['figure.figsize'] = (20,10)
  dftemp=covid_daily_cases.set_index('dateRep')
  grouped = dftemp.groupby('countriesAndTerritories')

  df = pd.DataFrame()
  for name, group in grouped:
    if name==country:
      df = group
  df.info()
  df = df[['day', 'month', 'year', 'cases','deaths']]
  df = df.iloc[::-1]
  X = df.drop('deaths', axis=1)
  Y = df['deaths']
  X_train, X_test, y_train, y_test = train_test_split( 
    X, Y, test_size = 0.3, random_state = 100)
  return X, Y, X_train, X_test, y_train, y_test
def RandomForest(X_train, X_test, y_train, y_test):
  model_rf = RandomForestRegressor(n_estimators=8, oob_score=True, random_state=100, max_depth=50)
  model_rf.fit(X_train, y_train) 
  pred_train_rf= model_rf.predict(X_train)
  # print(np.sqrt(mean_squared_error(y_train,pred_train_rf)))
  # print(r2_score(y_train, pred_train_rf))

  pred_test_rf = model_rf.predict(X_test)
  print('Mean Absolute Error:', mean_absolute_error(y_test,pred_test_rf))

def main():
  str_list = ["India", "Tajikistan", "Armenia", "Tunisia", "Haiti", "Panama", "Madagascar"]
  for x in range(len(str_list)):
    print(str_list[x])
    X, Y, X_train, X_test, y_train, y_test = splitdataset(str_list[x])
    rn_forest = RandomForest(X_train, X_test, y_train, y_test)
if __name__=="__main__":
  main()

"""#Linear Regression

#Prediction model to a country with highest Covid-19 death: 

#**India**
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

plt.rcParams['figure.figsize'] = (20,10)
dftemp=covid_daily_cases.set_index('dateRep')
grouped = dftemp.groupby('countriesAndTerritories')

df = pd.DataFrame()
for name, group in grouped:
  if name=='India':
    df = group

df.info()
df = df[['day', 'month', 'year', 'cases','deaths']]
df = df.iloc[::-1]
xFrame = df.drop('deaths', axis=1)
yFrame = df['deaths']

# Splitting the dataset into the Training set and Test set
xtrain, xtest, ytrain, ytest = train_test_split(xFrame.values, yFrame.values, test_size=0.25, shuffle=False)

# Fitting Multiple Linear Regression to the Training set
model = LinearRegression()
model.fit(xtrain,ytrain)
prediction = model.predict(xtest)

# Evaluating the accuracy
print()
accuracy = model.score(xtrain,ytrain)
print(f'Accuracy: {round(accuracy*100,3)} %')
print()

# Plot the results
plt.plot(df.index[:-len(prediction)], ytrain, label = 'Training')
plt.plot(df.index[-len(prediction):], ytest, label ='actual')
plt.plot(df.index[-len(prediction):], prediction, label='prediction')
plt.xlabel('Daily Cases')
plt.ylabel('Deaths')
plt.title('Daily Cases vs Deaths')
plt.legend(loc=1)
plt.show()

"""#Prediction model to top 3 countries with highest vege consumption: 

#**Tajikistan, Armenia, Tunisia**
"""

#Tajikistan
df = pd.DataFrame()
for name, group in grouped:
  if name=='Tajikistan':
    df = group

plt.rcParams['figure.figsize'] = (10,5)
dftemp=covid_daily_cases.set_index('dateRep')
grouped = dftemp.groupby('countriesAndTerritories')

df.info()
df = df[['day', 'month', 'year', 'cases','deaths']]
df = df.iloc[::-1]
xFrame = df.drop('deaths', axis=1)
yFrame = df['deaths']

# Splitting the dataset into the Training set and Test set
xtrain, xtest, ytrain, ytest = train_test_split(xFrame.values, yFrame.values, test_size=0.25, shuffle=False)

# Fitting Multiple Linear Regression to the Training set
model = LinearRegression()
model.fit(xtrain,ytrain)
prediction = model.predict(xtest)

# Evaluating the accuracy
print()
accuracy = model.score(xtrain,ytrain)
print(f'Accuracy: {round(accuracy*100,3)} %')
print()

# Plot the results
plt.plot(df.index[:-len(prediction)], ytrain, label = 'Training')
plt.plot(df.index[-len(prediction):], ytest, label ='actual')
plt.plot(df.index[-len(prediction):], prediction, label='prediction')
plt.xlabel('Daily Cases')
plt.ylabel('Deaths')
plt.title('Daily Cases vs Deaths')
plt.legend(loc=1)
plt.show()

#Armenia
df = pd.DataFrame()
for name, group in grouped:
  if name=='Armenia':
    df = group

plt.rcParams['figure.figsize'] = (10,5)
dftemp=covid_daily_cases.set_index('dateRep')
grouped = dftemp.groupby('countriesAndTerritories')

df.info()
df = df[['day', 'month', 'year', 'cases','deaths']]
df = df.iloc[::-1]
xFrame = df.drop('deaths', axis=1)
yFrame = df['deaths']

# Splitting the dataset into the Training set and Test set
xtrain, xtest, ytrain, ytest = train_test_split(xFrame.values, yFrame.values, test_size=0.25, shuffle=False)

# Fitting Multiple Linear Regression to the Training set
model = LinearRegression()
model.fit(xtrain,ytrain)
prediction = model.predict(xtest)

# Evaluating the accuracy
print()
accuracy = model.score(xtrain,ytrain)
print(f'Accuracy: {round(accuracy*100,3)} %')
print()

# Plot the results
plt.plot(df.index[:-len(prediction)], ytrain, label = 'Training')
plt.plot(df.index[-len(prediction):], ytest, label ='actual')
plt.plot(df.index[-len(prediction):], prediction, label='prediction')
plt.xlabel('Daily Cases')
plt.ylabel('Deaths')
plt.title('Daily Cases vs Deaths')
plt.legend(loc=1)
plt.show()

#Tunisia
df = pd.DataFrame()
for name, group in grouped:
  if name=='Tunisia':
    df = group

plt.rcParams['figure.figsize'] = (10,5)
dftemp=covid_daily_cases.set_index('dateRep')
grouped = dftemp.groupby('countriesAndTerritories')

df.info()
df = df[['day', 'month', 'year', 'cases','deaths']]
df = df.iloc[::-1]
xFrame = df.drop('deaths', axis=1)
yFrame = df['deaths']

# Splitting the dataset into the Training set and Test set
xtrain, xtest, ytrain, ytest = train_test_split(xFrame.values, yFrame.values, test_size=0.25, shuffle=False)

# Fitting Multiple Linear Regression to the Training set
model = LinearRegression()
model.fit(xtrain,ytrain)
prediction = model.predict(xtest)

# Evaluating the accuracy
print()
accuracy = model.score(xtrain,ytrain)
print(f'Accuracy: {round(accuracy*100,3)} %')
print()

# Plot the results
plt.plot(df.index[:-len(prediction)], ytrain, label = 'Training')
plt.plot(df.index[-len(prediction):], ytest, label ='actual')
plt.plot(df.index[-len(prediction):], prediction, label='prediction')
plt.xlabel('Daily Cases')
plt.ylabel('Deaths')
plt.title('Daily Cases vs Deaths')
plt.legend(loc=1)
plt.show()

"""#Prediction model to bottom 3 countries with lowest vege consumption:

#**Haiti, Panama, Madagascar**
"""

#Haiti
df = pd.DataFrame()
for name, group in grouped:
  if name=='Haiti':
    df = group

plt.rcParams['figure.figsize'] = (10,5)
dftemp=covid_daily_cases.set_index('dateRep')
grouped = dftemp.groupby('countriesAndTerritories')

df.info()
df = df[['day', 'month', 'year', 'cases','deaths']]
df = df.iloc[::-1]
xFrame = df.drop('deaths', axis=1)
yFrame = df['deaths']

# Splitting the dataset into the Training set and Test set
xtrain, xtest, ytrain, ytest = train_test_split(xFrame.values, yFrame.values, test_size=0.25, shuffle=False)

# Fitting Multiple Linear Regression to the Training set
model = LinearRegression()
model.fit(xtrain,ytrain)
prediction = model.predict(xtest)

# Evaluating the accuracy
print()
accuracy = model.score(xtrain,ytrain)
print(f'Accuracy: {round(accuracy*100,3)} %')
print()

# Plot the results
plt.plot(df.index[:-len(prediction)], ytrain, label = 'Training')
plt.plot(df.index[-len(prediction):], ytest, label ='actual')
plt.plot(df.index[-len(prediction):], prediction, label='prediction')
plt.xlabel('Daily Cases')
plt.ylabel('Deaths')
plt.title('Daily Cases vs Deaths')
plt.legend(loc=1)
plt.show()

#Panama
df = pd.DataFrame()
for name, group in grouped:
  if name=='Panama':
    df = group

plt.rcParams['figure.figsize'] = (10,5)
dftemp=covid_daily_cases.set_index('dateRep')
grouped = dftemp.groupby('countriesAndTerritories')

df.info()
df = df[['day', 'month', 'year', 'cases','deaths']]
df = df.iloc[::-1]
xFrame = df.drop('deaths', axis=1)
yFrame = df['deaths']

# Splitting the dataset into the Training set and Test set
xtrain, xtest, ytrain, ytest = train_test_split(xFrame.values, yFrame.values, test_size=0.25, shuffle=False)

# Fitting Multiple Linear Regression to the Training set
model = LinearRegression()
model.fit(xtrain,ytrain)
prediction = model.predict(xtest)

# Evaluating the accuracy
print()
accuracy = model.score(xtrain,ytrain)
print(f'Accuracy: {round(accuracy*100,3)} %')
print()

# Plot the results
plt.plot(df.index[:-len(prediction)], ytrain, label = 'Training')
plt.plot(df.index[-len(prediction):], ytest, label ='actual')
plt.plot(df.index[-len(prediction):], prediction, label='prediction')
plt.xlabel('Daily Cases')
plt.ylabel('Deaths')
plt.title('Daily Cases vs Deaths')
plt.legend(loc=1)
plt.show()

#Madagascar
df = pd.DataFrame()
for name, group in grouped:
  if name=='Madagascar':
    df = group

plt.rcParams['figure.figsize'] = (10,5)
dftemp=covid_daily_cases.set_index('dateRep')
grouped = dftemp.groupby('countriesAndTerritories')

df.info()
df = df[['day', 'month', 'year', 'cases','deaths']]
df = df.iloc[::-1]
xFrame = df.drop('deaths', axis=1)
yFrame = df['deaths']

# Splitting the dataset into the Training set and Test set
xtrain, xtest, ytrain, ytest = train_test_split(xFrame.values, yFrame.values, test_size=0.25, shuffle=False)

# Fitting Multiple Linear Regression to the Training set
model = LinearRegression()
model.fit(xtrain,ytrain)
prediction = model.predict(xtest)

# Evaluating the accuracy
print()
accuracy = model.score(xtrain,ytrain)
print(f'Accuracy: {round(accuracy*100,3)} %')
print()

# Plot the results
plt.plot(df.index[:-len(prediction)], ytrain, label = 'Training')
plt.plot(df.index[-len(prediction):], ytest, label ='actual')
plt.plot(df.index[-len(prediction):], prediction, label='prediction')
plt.xlabel('Daily Cases')
plt.ylabel('Deaths')
plt.title('Daily Cases vs Deaths')
plt.legend(loc=1)
plt.show()

"""##Conclusion:

1. For the first question, it can be seen in the bar chart that none of the countries consume 40% of vegetables which is recommended for a balanced diet. Tajikistan's people consume almost 20% of vegetables which is the highest.
2. For the second question,the current death and total cases in countries that consume recommended amount of vegetables for their daily intakes is better as compare to those that doesn't follow the recommendation, if vegetable intake is between  15-20%, the number of total case will be less.the number of vegetable intake increase then the number of total covid case will decrease. 
3. For our third question we wanted to compare the different machine learning models to identify the best model to use for prediction in similar use cases to predict the timesearies. In our case we had use Randomforest and Linearregression. We had used the Top 3 and Bottom 3 countries according to the vegetable consumption. Our results as shown in following table clearly states that Randomforest has better accuracy and performance as compare to the linearregression. As an exmaple we got the 46.27% accuracy of predicting covid deaths in "Madagascar" using Linearregression while Randomforest has outperfomed and gives mean absolute error of 0.7 which means 99.3% accuracy. Though the numbers from Randomforest are verry efficient yet in some cases Randomforest does underperformed as in the case of India where the mean absolute value is abut 34.3 which is about 76.7% accuracy not as high as other countries. It might further be improved by fixing the model paramters and find the best suitbale paramters that can perform well in every case for this use case. 

|  Country | Accuracy (Linear Regression)  |  Mean Absolute Error (Random Forest)  |   |   |
|---|---|---|---|---|
| India  | 90.21  | 30.31  |   |   |
| Tajikistan  | 15.832  | 0.41  |   |   |
| Armenia  | 66.497  | 2.21  |  |   |
| Tunisia  | 66.79  | 6.46  |   |   |
| Haiti  | 21.68  | 0.93  |   |   |
| Panama  | 60.58  | 3.25  |   |   |
| Madagascar  | 46.27  | 0.70  |   |   |


Some other imporatnt factors that cause the models to result in low performance or accuracy is the source of data and some countries doesn't release the accurate data as oppose to others. These factors give highly diversified results, it can also be improved with higher accuracy of data. 

Due to limitation of time and resources, we able to scrab the covid data for shoarter period of time. We can further improve this by having better resource and larger amount of dataset.

#**Reference**


* Cuiyan Wang et al., (2021, Feb 11). The impact of COVID-19 pandemic on physical and mental health of Asians: A study of seven middle-income countries in Asia. https://doi.org/10.1371/journal.pone.0246824


* Rice University. (2020, Apr 6). Six strategies for staying motivated during the COVID-19 pandemic. https://graduate.rice.edu/news-six-strategies-staying-motivated-during-covid-19-pandemic


* Matthew H. C. Mak. (2021, Oct 11). Children’s Motivation to Learn at Home During the COVID-19 Pandemic: Insights From Indian Parents. https://doi.org/10.3389/feduc.2021.744686


* University of Pittsburgh. (2021). COVID-19 Pandemic: Supervisor Tips & Tools for Motivating Remote Staff to Stay Engaged and Productive. https://www.hr.pitt.edu/news/covid-19-pandemic-supervisor-tips-tools-motivating-remote-staff-stay-engaged-and-productive


* Jennifer Cromley and Andrea Kunze. (2021). Motivational Resilience during COVID-19 across At-Risk Undergraduates. J Microbiol Biol Educ. 2021; 22(1): 22.1.46. DOI:https://doi.org/10.1128/jmbe.v22i1.2271


* Thomas K. F. Chiu et al., (2021). Motivating Online Learning: The Challenges of COVID-19 and Beyond. Asia-Pacific Edu Res. 2021 Apr 28 : 1–4. DOI
https://doi.org/10.1007/s40299-021-00566-w
"""